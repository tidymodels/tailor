% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tailor.R
\name{tailor}
\alias{tailor}
\title{Declare post-processing for model predictions}
\usage{
tailor(outcome = NULL, estimate = NULL, probabilities = NULL)
}
\arguments{
\item{outcome}{<\code{\link[dplyr:dplyr_tidy_select]{tidy-select}}> Only required
when used independently of \code{?workflows::add_tailor()}, and can also be passed
at \code{fit()} time instead. The column name of the outcome variable.}

\item{estimate}{<\code{\link[dplyr:dplyr_tidy_select]{tidy-select}}> Only required
when used independently of \code{?workflows::add_tailor()}, and can also be passed
at \code{fit()} time instead. The column name of the point estimate (e.g. predicted
class), In tidymodels, this corresponds to column names \code{.pred},
\code{.pred_class}, or \code{.pred_time}.}

\item{probabilities}{<\code{\link[dplyr:dplyr_tidy_select]{tidy-select}}> Only required
when used independently of \code{?workflows::add_tailor()} for the \code{"binary"} or
\code{"multiclass"} types, and can also be passed at \code{fit()} time instead.
The column names of class probability estimates. These should be given in
the order of the factor levels of the \code{estimate}.}
}
\description{
Tailors compose iterative adjustments to model predictions. After
initializing a tailor with this function, add adjustment specifications
with \verb{adjust_*()} functions:
\itemize{
\item For probability distributions: \code{\link[=adjust_probability_calibration]{adjust_probability_calibration()}}
\item For transformation of probabilities to hard class predictions:
\code{\link[=adjust_probability_threshold]{adjust_probability_threshold()}}, \code{\link[=adjust_equivocal_zone]{adjust_equivocal_zone()}}
\item For numeric distributions: \code{\link[=adjust_numeric_calibration]{adjust_numeric_calibration()}},
\code{\link[=adjust_numeric_range]{adjust_numeric_range()}}
}

For ad-hoc adjustments, see \code{\link[=adjust_predictions_custom]{adjust_predictions_custom()}}.

Tailors must be trained with \link[=fit.tailor]{fit()} before being applied to
new data with \link[=predict.tailor]{predict()}. Tailors are tightly integrated
with the \href{https://tidymodels.org}{tidymodels} framework; for greatest ease
of use, situate tailors in model workflows with \code{?workflows::add_tailor()}.
}
\examples{
\dontshow{if (rlang::is_installed(c("probably", "modeldata"))) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
library(dplyr)
library(modeldata)

# `predicted` gives hard class predictions based on probabilities
two_class_example \%>\% count(predicted)

# change the probability threshold to allot one class vs the other
tlr <-
  tailor() \%>\%
  adjust_probability_threshold(threshold = .1)

tlr

# fit by supplying column names. situate in a modeling workflow
# with `workflows::add_tailor()` to avoid having to do so manually
tlr_fit <- fit(
  tlr,
  two_class_example,
  outcome = c(truth),
  estimate = c(predicted),
  probabilities = c(Class1, Class2)
)

tlr_fit

# adjust hard class predictions
predict(tlr_fit, two_class_example) \%>\% count(predicted)
\dontshow{\}) # examplesIf}
}
